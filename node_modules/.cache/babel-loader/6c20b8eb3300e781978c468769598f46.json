{"ast":null,"code":"\"use strict\";\n/* IMPORT */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = require(\"path\");\n\nconst consts_1 = require(\"../consts\");\n\nconst fs_1 = require(\"./fs\");\n/* TEMP */\n//TODO: Maybe publish this as a standalone package\n\n\nconst Temp = {\n  store: {},\n  create: filePath => {\n    const randomness = `000000${Math.floor(Math.random() * 16777215).toString(16)}`.slice(-6),\n          // 6 random-enough hex characters\n    timestamp = Date.now().toString().slice(-10),\n          // 10 precise timestamp digits\n    prefix = 'tmp-',\n          suffix = `.${prefix}${timestamp}${randomness}`,\n          tempPath = `${filePath}${suffix}`;\n    return tempPath;\n  },\n  get: (filePath, creator, purge = true) => {\n    const tempPath = Temp.truncate(creator(filePath));\n    if (tempPath in Temp.store) return Temp.get(filePath, creator, purge); // Collision found, try again\n\n    Temp.store[tempPath] = purge;\n\n    const disposer = () => delete Temp.store[tempPath];\n\n    return [tempPath, disposer];\n  },\n  purge: filePath => {\n    if (!Temp.store[filePath]) return;\n    delete Temp.store[filePath];\n    fs_1.default.unlinkAttempt(filePath);\n  },\n  purgeSync: filePath => {\n    if (!Temp.store[filePath]) return;\n    delete Temp.store[filePath];\n    fs_1.default.unlinkSyncAttempt(filePath);\n  },\n  purgeSyncAll: () => {\n    for (const filePath in Temp.store) {\n      Temp.purgeSync(filePath);\n    }\n  },\n  truncate: filePath => {\n    const basename = path.basename(filePath);\n    if (basename.length <= consts_1.LIMIT_BASENAME_LENGTH) return filePath; //FIXME: Rough and quick attempt at detecting ok lengths\n\n    const truncable = /^(\\.?)(.*?)((?:\\.[^.]+)?(?:\\.tmp-\\d{10}[a-f0-9]{6})?)$/.exec(basename);\n    if (!truncable) return filePath; //FIXME: No truncable part detected, can't really do much without also changing the parent path, which is unsafe, hoping for the best here\n\n    const truncationLength = basename.length - consts_1.LIMIT_BASENAME_LENGTH;\n    return `${filePath.slice(0, -basename.length)}${truncable[1]}${truncable[2].slice(0, -truncationLength)}${truncable[3]}`; //FIXME: The truncable part might be shorter than needed here\n  }\n};\n/* INIT */\n\nprocess.on('exit', Temp.purgeSyncAll); // Ensuring purgeable temp files are purged on exit\n\n/* EXPORT */\n\nexports.default = Temp;","map":null,"metadata":{},"sourceType":"script"}