{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst code_1 = require(\"../code\");\n\nexports.error = {\n  message: ({\n    params: {\n      property,\n      depsCount,\n      deps\n    }\n  }) => {\n    const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n    return codegen_1.str`must have ${property_ies} ${deps} when property ${property} is present`;\n  },\n  params: ({\n    params: {\n      property,\n      depsCount,\n      deps,\n      missingProperty\n    }\n  }) => codegen_1._`{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}` // TODO change to reference\n\n};\nconst def = {\n  keyword: \"dependencies\",\n  type: \"object\",\n  schemaType: \"object\",\n  error: exports.error,\n\n  code(cxt) {\n    const [propDeps, schDeps] = splitDependencies(cxt);\n    validatePropertyDeps(cxt, propDeps);\n    validateSchemaDeps(cxt, schDeps);\n  }\n\n};\n\nfunction splitDependencies({\n  schema\n}) {\n  const propertyDeps = {};\n  const schemaDeps = {};\n\n  for (const key in schema) {\n    if (key === \"__proto__\") continue;\n    const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n    deps[key] = schema[key];\n  }\n\n  return [propertyDeps, schemaDeps];\n}\n\nfunction validatePropertyDeps(cxt, propertyDeps = cxt.schema) {\n  const {\n    gen,\n    data,\n    it\n  } = cxt;\n  if (Object.keys(propertyDeps).length === 0) return;\n  const missing = gen.let(\"missing\");\n\n  for (const prop in propertyDeps) {\n    const deps = propertyDeps[prop];\n    if (deps.length === 0) continue;\n    const hasProperty = code_1.propertyInData(gen, data, prop, it.opts.ownProperties);\n    cxt.setParams({\n      property: prop,\n      depsCount: deps.length,\n      deps: deps.join(\", \")\n    });\n\n    if (it.allErrors) {\n      gen.if(hasProperty, () => {\n        for (const depProp of deps) {\n          code_1.checkReportMissingProp(cxt, depProp);\n        }\n      });\n    } else {\n      gen.if(codegen_1._`${hasProperty} && (${code_1.checkMissingProp(cxt, deps, missing)})`);\n      code_1.reportMissingProp(cxt, missing);\n      gen.else();\n    }\n  }\n}\n\nexports.validatePropertyDeps = validatePropertyDeps;\n\nfunction validateSchemaDeps(cxt, schemaDeps = cxt.schema) {\n  const {\n    gen,\n    data,\n    keyword,\n    it\n  } = cxt;\n  const valid = gen.name(\"valid\");\n\n  for (const prop in schemaDeps) {\n    if (util_1.alwaysValidSchema(it, schemaDeps[prop])) continue;\n    gen.if(code_1.propertyInData(gen, data, prop, it.opts.ownProperties), () => {\n      const schCxt = cxt.subschema({\n        keyword,\n        schemaProp: prop\n      }, valid);\n      cxt.mergeValidEvaluated(schCxt, valid);\n    }, () => gen.var(valid, true) // TODO var\n    );\n    cxt.ok(valid);\n  }\n}\n\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}