{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport useCacheErrors from './hooks/useCacheErrors';\nimport useForceUpdate from '../_util/hooks/useForceUpdate';\nimport { FormItemPrefixContext } from './context';\nimport { ConfigContext } from '../config-provider';\nvar EMPTY_LIST = [];\nexport default function ErrorList(_ref) {\n  var _ref$errors = _ref.errors,\n      errors = _ref$errors === void 0 ? EMPTY_LIST : _ref$errors,\n      help = _ref.help,\n      onDomErrorVisibleChange = _ref.onDomErrorVisibleChange;\n  var forceUpdate = useForceUpdate();\n\n  var _React$useContext = React.useContext(FormItemPrefixContext),\n      prefixCls = _React$useContext.prefixCls,\n      status = _React$useContext.status;\n\n  var _React$useContext2 = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext2.getPrefixCls;\n\n  var _useCacheErrors = useCacheErrors(errors, function (changedVisible) {\n    if (changedVisible) {\n      /**\n       * We trigger in sync to avoid dom shaking but this get warning in react 16.13.\n       *\n       * So use Promise to keep in micro async to handle this.\n       * https://github.com/ant-design/ant-design/issues/21698#issuecomment-593743485\n       */\n      Promise.resolve().then(function () {\n        onDomErrorVisibleChange === null || onDomErrorVisibleChange === void 0 ? void 0 : onDomErrorVisibleChange(true);\n      });\n    }\n\n    forceUpdate();\n  }, !!help),\n      _useCacheErrors2 = _slicedToArray(_useCacheErrors, 2),\n      visible = _useCacheErrors2[0],\n      cacheErrors = _useCacheErrors2[1];\n\n  var memoErrors = useMemo(function () {\n    return cacheErrors;\n  }, visible, function (_, nextVisible) {\n    return nextVisible;\n  }); // Memo status in same visible\n\n  var _React$useState = React.useState(status),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      innerStatus = _React$useState2[0],\n      setInnerStatus = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (visible && status) {\n      setInnerStatus(status);\n    }\n  }, [visible, status]);\n  var baseClassName = \"\".concat(prefixCls, \"-item-explain\");\n  var rootPrefixCls = getPrefixCls();\n  return /*#__PURE__*/React.createElement(CSSMotion, {\n    motionDeadline: 500,\n    visible: visible,\n    motionName: \"\".concat(rootPrefixCls, \"-show-help\"),\n    onLeaveEnd: function onLeaveEnd() {\n      onDomErrorVisibleChange === null || onDomErrorVisibleChange === void 0 ? void 0 : onDomErrorVisibleChange(false);\n    },\n    motionAppear: true,\n    removeOnLeave: true\n  }, function (_ref2) {\n    var motionClassName = _ref2.className;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(baseClassName, _defineProperty({}, \"\".concat(baseClassName, \"-\").concat(innerStatus), innerStatus), motionClassName),\n      key: \"help\"\n    }, memoErrors.map(function (error, index) {\n      return (\n        /*#__PURE__*/\n        // eslint-disable-next-line react/no-array-index-key\n        React.createElement(\"div\", {\n          key: index,\n          role: \"alert\"\n        }, error)\n      );\n    }));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}