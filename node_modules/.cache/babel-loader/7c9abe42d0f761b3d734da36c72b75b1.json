{"ast":null,"code":"\"use strict\";\n/* IMPORT */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst consts_1 = require(\"../consts\");\n/* RETRYIFY QUEUE */\n\n\nconst RetryfyQueue = {\n  interval: 25,\n  intervalId: undefined,\n  limit: consts_1.LIMIT_FILES_DESCRIPTORS,\n  queueActive: new Set(),\n  queueWaiting: new Set(),\n  init: () => {\n    if (RetryfyQueue.intervalId) return;\n    RetryfyQueue.intervalId = setInterval(RetryfyQueue.tick, RetryfyQueue.interval);\n  },\n  reset: () => {\n    if (!RetryfyQueue.intervalId) return;\n    clearInterval(RetryfyQueue.intervalId);\n    delete RetryfyQueue.intervalId;\n  },\n  add: fn => {\n    RetryfyQueue.queueWaiting.add(fn);\n\n    if (RetryfyQueue.queueActive.size < RetryfyQueue.limit / 2) {\n      // Active queue not under preassure, executing immediately\n      RetryfyQueue.tick();\n    } else {\n      RetryfyQueue.init();\n    }\n  },\n  remove: fn => {\n    RetryfyQueue.queueWaiting.delete(fn);\n    RetryfyQueue.queueActive.delete(fn);\n  },\n  schedule: () => {\n    return new Promise(resolve => {\n      const cleanup = () => RetryfyQueue.remove(resolver);\n\n      const resolver = () => resolve(cleanup);\n\n      RetryfyQueue.add(resolver);\n    });\n  },\n  tick: () => {\n    if (RetryfyQueue.queueActive.size >= RetryfyQueue.limit) return;\n    if (!RetryfyQueue.queueWaiting.size) return RetryfyQueue.reset();\n\n    for (const fn of RetryfyQueue.queueWaiting) {\n      if (RetryfyQueue.queueActive.size >= RetryfyQueue.limit) break;\n      RetryfyQueue.queueWaiting.delete(fn);\n      RetryfyQueue.queueActive.add(fn);\n      fn();\n    }\n  }\n};\n/* EXPORT */\n\nexports.default = RetryfyQueue;","map":null,"metadata":{},"sourceType":"script"}