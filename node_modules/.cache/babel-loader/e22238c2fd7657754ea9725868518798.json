{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst {\n  app,\n  ipcMain,\n  ipcRenderer,\n  shell\n} = require('electron');\n\nconst Conf = require('conf');\n\nlet isInitialized = false; // Set up the `ipcMain` handler for communication between renderer and main process.\n\nconst initDataListener = () => {\n  if (!ipcMain || !app) {\n    throw new Error('Electron Store: You need to call `.initRenderer()` from the main process.');\n  }\n\n  const appData = {\n    defaultCwd: app.getPath('userData'),\n    appVersion: app.getVersion()\n  };\n\n  if (isInitialized) {\n    return appData;\n  }\n\n  ipcMain.on('electron-store-get-data', event => {\n    event.returnValue = appData;\n  });\n  isInitialized = true;\n  return appData;\n};\n\nclass ElectronStore extends Conf {\n  constructor(options) {\n    let defaultCwd;\n    let appVersion; // If we are in the renderer process, we communicate with the main process\n    // to get the required data for the module otherwise, we pull from the main process.\n\n    if (ipcRenderer) {\n      const appData = ipcRenderer.sendSync('electron-store-get-data');\n\n      if (!appData) {\n        throw new Error('Electron Store: You need to call `.initRenderer()` from the main process.');\n      }\n\n      ({\n        defaultCwd,\n        appVersion\n      } = appData);\n    } else if (ipcMain && app) {\n      ({\n        defaultCwd,\n        appVersion\n      } = initDataListener());\n    }\n\n    options = {\n      name: 'config',\n      ...options\n    };\n\n    if (!options.projectVersion) {\n      options.projectVersion = appVersion;\n    }\n\n    if (options.cwd) {\n      options.cwd = path.isAbsolute(options.cwd) ? options.cwd : path.join(defaultCwd, options.cwd);\n    } else {\n      options.cwd = defaultCwd;\n    }\n\n    options.configName = options.name;\n    delete options.name;\n    super(options);\n  }\n\n  static initRenderer() {\n    initDataListener();\n  }\n\n  openInEditor() {\n    shell.openPath(this.path);\n  }\n\n}\n\nmodule.exports = ElectronStore;","map":null,"metadata":{},"sourceType":"script"}