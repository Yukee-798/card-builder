{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst dataType_1 = require(\"../../compile/validate/dataType\");\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst equal_1 = require(\"../../runtime/equal\");\n\nconst error = {\n  message: ({\n    params: {\n      i,\n      j\n    }\n  }) => codegen_1.str`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n  params: ({\n    params: {\n      i,\n      j\n    }\n  }) => codegen_1._`{i: ${i}, j: ${j}}`\n};\nconst def = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schema,\n      parentSchema,\n      schemaCode,\n      it\n    } = cxt;\n    if (!$data && !schema) return;\n    const valid = gen.let(\"valid\");\n    const itemTypes = parentSchema.items ? dataType_1.getSchemaTypes(parentSchema.items) : [];\n    cxt.block$data(valid, validateUniqueItems, codegen_1._`${schemaCode} === false`);\n    cxt.ok(valid);\n\n    function validateUniqueItems() {\n      const i = gen.let(\"i\", codegen_1._`${data}.length`);\n      const j = gen.let(\"j\");\n      cxt.setParams({\n        i,\n        j\n      });\n      gen.assign(valid, true);\n      gen.if(codegen_1._`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));\n    }\n\n    function canOptimize() {\n      return itemTypes.length > 0 && !itemTypes.some(t => t === \"object\" || t === \"array\");\n    }\n\n    function loopN(i, j) {\n      const item = gen.name(\"item\");\n      const wrongType = dataType_1.checkDataTypes(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);\n      const indices = gen.const(\"indices\", codegen_1._`{}`);\n      gen.for(codegen_1._`;${i}--;`, () => {\n        gen.let(item, codegen_1._`${data}[${i}]`);\n        gen.if(wrongType, codegen_1._`continue`);\n        if (itemTypes.length > 1) gen.if(codegen_1._`typeof ${item} == \"string\"`, codegen_1._`${item} += \"_\"`);\n        gen.if(codegen_1._`typeof ${indices}[${item}] == \"number\"`, () => {\n          gen.assign(j, codegen_1._`${indices}[${item}]`);\n          cxt.error();\n          gen.assign(valid, false).break();\n        }).code(codegen_1._`${indices}[${item}] = ${i}`);\n      });\n    }\n\n    function loopN2(i, j) {\n      const eql = util_1.useFunc(gen, equal_1.default);\n      const outer = gen.name(\"outer\");\n      gen.label(outer).for(codegen_1._`;${i}--;`, () => gen.for(codegen_1._`${j} = ${i}; ${j}--;`, () => gen.if(codegen_1._`${eql}(${data}[${i}], ${data}[${j}])`, () => {\n        cxt.error();\n        gen.assign(valid, false).break(outer);\n      })));\n    }\n  }\n\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}