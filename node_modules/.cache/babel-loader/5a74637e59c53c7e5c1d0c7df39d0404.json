{"ast":null,"code":"'use strict';\n\nconst mimicFn = require('mimic-fn');\n\nmodule.exports = (inputFunction, options = {}) => {\n  if (typeof inputFunction !== 'function') {\n    throw new TypeError(`Expected the first argument to be a function, got \\`${typeof inputFunction}\\``);\n  }\n\n  const {\n    wait = 0,\n    before = false,\n    after = true\n  } = options;\n\n  if (!before && !after) {\n    throw new Error('Both `before` and `after` are false, function wouldn\\'t be called.');\n  }\n\n  let timeout;\n  let result;\n\n  const debouncedFunction = function (...arguments_) {\n    const context = this;\n\n    const later = () => {\n      timeout = undefined;\n\n      if (after) {\n        result = inputFunction.apply(context, arguments_);\n      }\n    };\n\n    const shouldCallNow = before && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (shouldCallNow) {\n      result = inputFunction.apply(context, arguments_);\n    }\n\n    return result;\n  };\n\n  mimicFn(debouncedFunction, inputFunction);\n\n  debouncedFunction.cancel = () => {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = undefined;\n    }\n  };\n\n  return debouncedFunction;\n};","map":null,"metadata":{},"sourceType":"script"}