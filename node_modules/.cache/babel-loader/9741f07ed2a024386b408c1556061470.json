{"ast":null,"code":"\"use strict\";\n/* IMPORT */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.retryifySync = exports.retryifyAsync = void 0;\n\nconst retryify_queue_1 = require(\"./retryify_queue\");\n/* RETRYIFY */\n\n\nconst retryifyAsync = (fn, isRetriableError) => {\n  return function (timestamp) {\n    return function attempt() {\n      return retryify_queue_1.default.schedule().then(cleanup => {\n        return fn.apply(undefined, arguments).then(result => {\n          cleanup();\n          return result;\n        }, error => {\n          cleanup();\n          if (Date.now() >= timestamp) throw error;\n\n          if (isRetriableError(error)) {\n            const delay = Math.round(100 + 400 * Math.random()),\n                  delayPromise = new Promise(resolve => setTimeout(resolve, delay));\n            return delayPromise.then(() => attempt.apply(undefined, arguments));\n          }\n\n          throw error;\n        });\n      });\n    };\n  };\n};\n\nexports.retryifyAsync = retryifyAsync;\n\nconst retryifySync = (fn, isRetriableError) => {\n  return function (timestamp) {\n    return function attempt() {\n      try {\n        return fn.apply(undefined, arguments);\n      } catch (error) {\n        if (Date.now() > timestamp) throw error;\n        if (isRetriableError(error)) return attempt.apply(undefined, arguments);\n        throw error;\n      }\n    };\n  };\n};\n\nexports.retryifySync = retryifySync;","map":null,"metadata":{},"sourceType":"script"}