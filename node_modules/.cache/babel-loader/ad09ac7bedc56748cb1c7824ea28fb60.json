{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst code_1 = require(\"../code\");\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst names_1 = require(\"../../compile/names\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: \"must NOT have additional properties\",\n  params: ({\n    params\n  }) => codegen_1._`{additionalProperty: ${params.additionalProperty}}`\n};\nconst def = {\n  keyword: \"additionalProperties\",\n  type: [\"object\"],\n  schemaType: [\"boolean\", \"object\"],\n  allowUndefined: true,\n  trackErrors: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      data,\n      errsCount,\n      it\n    } = cxt;\n    /* istanbul ignore if */\n\n    if (!errsCount) throw new Error(\"ajv implementation error\");\n    const {\n      allErrors,\n      opts\n    } = it;\n    it.props = true;\n    if (opts.removeAdditional !== \"all\" && util_1.alwaysValidSchema(it, schema)) return;\n    const props = code_1.allSchemaProperties(parentSchema.properties);\n    const patProps = code_1.allSchemaProperties(parentSchema.patternProperties);\n    checkAdditionalProperties();\n    cxt.ok(codegen_1._`${errsCount} === ${names_1.default.errors}`);\n\n    function checkAdditionalProperties() {\n      gen.forIn(\"key\", data, key => {\n        if (!props.length && !patProps.length) additionalPropertyCode(key);else gen.if(isAdditional(key), () => additionalPropertyCode(key));\n      });\n    }\n\n    function isAdditional(key) {\n      let definedProp;\n\n      if (props.length > 8) {\n        // TODO maybe an option instead of hard-coded 8?\n        const propsSchema = util_1.schemaRefOrVal(it, parentSchema.properties, \"properties\");\n        definedProp = code_1.isOwnProperty(gen, propsSchema, key);\n      } else if (props.length) {\n        definedProp = codegen_1.or(...props.map(p => codegen_1._`${key} === ${p}`));\n      } else {\n        definedProp = codegen_1.nil;\n      }\n\n      if (patProps.length) {\n        definedProp = codegen_1.or(definedProp, ...patProps.map(p => codegen_1._`${code_1.usePattern(cxt, p)}.test(${key})`));\n      }\n\n      return codegen_1.not(definedProp);\n    }\n\n    function deleteAdditional(key) {\n      gen.code(codegen_1._`delete ${data}[${key}]`);\n    }\n\n    function additionalPropertyCode(key) {\n      if (opts.removeAdditional === \"all\" || opts.removeAdditional && schema === false) {\n        deleteAdditional(key);\n        return;\n      }\n\n      if (schema === false) {\n        cxt.setParams({\n          additionalProperty: key\n        });\n        cxt.error();\n        if (!allErrors) gen.break();\n        return;\n      }\n\n      if (typeof schema == \"object\" && !util_1.alwaysValidSchema(it, schema)) {\n        const valid = gen.name(\"valid\");\n\n        if (opts.removeAdditional === \"failing\") {\n          applyAdditionalSchema(key, valid, false);\n          gen.if(codegen_1.not(valid), () => {\n            cxt.reset();\n            deleteAdditional(key);\n          });\n        } else {\n          applyAdditionalSchema(key, valid);\n          if (!allErrors) gen.if(codegen_1.not(valid), () => gen.break());\n        }\n      }\n    }\n\n    function applyAdditionalSchema(key, valid, errors) {\n      const subschema = {\n        keyword: \"additionalProperties\",\n        dataProp: key,\n        dataPropType: util_1.Type.Str\n      };\n\n      if (errors === false) {\n        Object.assign(subschema, {\n          compositeRule: true,\n          createErrors: false,\n          allErrors: false\n        });\n      }\n\n      cxt.subschema(subschema, valid);\n    }\n  }\n\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}