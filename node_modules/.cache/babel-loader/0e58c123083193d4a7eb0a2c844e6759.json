{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport arrayTreeFilter from 'array-tree-filter';\n\nvar Menus = /*#__PURE__*/function (_React$Component) {\n  _inherits(Menus, _React$Component);\n\n  var _super = _createSuper(Menus);\n\n  function Menus() {\n    var _this;\n\n    _classCallCheck(this, Menus);\n\n    _this = _super.apply(this, arguments);\n    _this.menuItems = {};\n\n    _this.saveMenuItem = function (index) {\n      return function (node) {\n        _this.menuItems[index] = node;\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Menus, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollActiveItemToView();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.visible && this.props.visible) {\n        this.scrollActiveItemToView();\n      }\n    }\n  }, {\n    key: \"getFieldName\",\n    value: function getFieldName(name) {\n      var _this$props = this.props,\n          fieldNames = _this$props.fieldNames,\n          defaultFieldNames = _this$props.defaultFieldNames; // 防止只设置单个属性的名字\n\n      return fieldNames[name] || defaultFieldNames[name];\n    }\n  }, {\n    key: \"getOption\",\n    value: function getOption(option, menuIndex) {\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          expandTrigger = _this$props2.expandTrigger,\n          expandIcon = _this$props2.expandIcon,\n          loadingIcon = _this$props2.loadingIcon;\n      var onSelect = this.props.onSelect.bind(this, option, menuIndex);\n      var onItemDoubleClick = this.props.onItemDoubleClick.bind(this, option, menuIndex);\n      var expandProps = {\n        onClick: onSelect,\n        onDoubleClick: onItemDoubleClick\n      };\n      var menuItemCls = \"\".concat(prefixCls, \"-menu-item\");\n      var expandIconNode = null;\n      var hasChildren = option[this.getFieldName('children')] && option[this.getFieldName('children')].length > 0;\n\n      if (hasChildren || option.isLeaf === false) {\n        menuItemCls += \" \".concat(prefixCls, \"-menu-item-expand\");\n\n        if (!option.loading) {\n          expandIconNode = /*#__PURE__*/React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-menu-item-expand-icon\")\n          }, expandIcon);\n        }\n      }\n\n      if (expandTrigger === 'hover' && (hasChildren || option.isLeaf === false)) {\n        expandProps = {\n          onMouseEnter: this.delayOnSelect.bind(this, onSelect),\n          onMouseLeave: this.delayOnSelect.bind(this),\n          onClick: onSelect\n        };\n      }\n\n      if (this.isActiveOption(option, menuIndex)) {\n        menuItemCls += \" \".concat(prefixCls, \"-menu-item-active\");\n        expandProps.ref = this.saveMenuItem(menuIndex);\n      }\n\n      if (option.disabled) {\n        menuItemCls += \" \".concat(prefixCls, \"-menu-item-disabled\");\n      }\n\n      var loadingIconNode = null;\n\n      if (option.loading) {\n        menuItemCls += \" \".concat(prefixCls, \"-menu-item-loading\");\n        loadingIconNode = loadingIcon || null;\n      }\n\n      var title = '';\n\n      if ('title' in option) {\n        // eslint-disable-next-line prefer-destructuring\n        title = option.title;\n      } else if (typeof option[this.getFieldName('label')] === 'string') {\n        title = option[this.getFieldName('label')];\n      }\n\n      return /*#__PURE__*/React.createElement(\"li\", Object.assign({\n        key: option[this.getFieldName('value')],\n        className: menuItemCls,\n        title: title\n      }, expandProps, {\n        role: \"menuitem\",\n        onMouseDown: function onMouseDown(e) {\n          return e.preventDefault();\n        }\n      }), option[this.getFieldName('label')], expandIconNode, loadingIconNode);\n    }\n  }, {\n    key: \"getActiveOptions\",\n    value: function getActiveOptions(values) {\n      var _this2 = this;\n\n      var options = this.props.options;\n      var activeValue = values || this.props.activeValue;\n      return arrayTreeFilter(options, function (o, level) {\n        return o[_this2.getFieldName('value')] === activeValue[level];\n      }, {\n        childrenKeyName: this.getFieldName('children')\n      });\n    }\n  }, {\n    key: \"getShowOptions\",\n    value: function getShowOptions() {\n      var _this3 = this;\n\n      var options = this.props.options;\n      var result = this.getActiveOptions().map(function (activeOption) {\n        return activeOption[_this3.getFieldName('children')];\n      }).filter(function (activeOption) {\n        return !!activeOption;\n      });\n      result.unshift(options);\n      return result;\n    }\n  }, {\n    key: \"delayOnSelect\",\n    value: function delayOnSelect(onSelect) {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (this.delayTimer) {\n        clearTimeout(this.delayTimer);\n        this.delayTimer = null;\n      }\n\n      if (typeof onSelect === 'function') {\n        this.delayTimer = window.setTimeout(function () {\n          onSelect(args);\n          _this4.delayTimer = null;\n        }, 150);\n      }\n    }\n  }, {\n    key: \"scrollActiveItemToView\",\n    value: function scrollActiveItemToView() {\n      // scroll into view\n      var optionsLength = this.getShowOptions().length; // eslint-disable-next-line no-plusplus\n\n      for (var i = 0; i < optionsLength; i++) {\n        var itemComponent = this.menuItems[i];\n\n        if (itemComponent && itemComponent.parentElement) {\n          itemComponent.parentElement.scrollTop = itemComponent.offsetTop;\n        }\n      }\n    }\n  }, {\n    key: \"isActiveOption\",\n    value: function isActiveOption(option, menuIndex) {\n      var _this$props$activeVal = this.props.activeValue,\n          activeValue = _this$props$activeVal === void 0 ? [] : _this$props$activeVal;\n      return activeValue[menuIndex] === option[this.getFieldName('value')];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$props3 = this.props,\n          prefixCls = _this$props3.prefixCls,\n          dropdownMenuColumnStyle = _this$props3.dropdownMenuColumnStyle;\n      return /*#__PURE__*/React.createElement(\"div\", null, this.getShowOptions().map(function (options, menuIndex) {\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"\".concat(prefixCls, \"-menu\"),\n          key: menuIndex,\n          style: dropdownMenuColumnStyle\n        }, options.map(function (option) {\n          return _this5.getOption(option, menuIndex);\n        }));\n      }));\n    }\n  }]);\n\n  return Menus;\n}(React.Component);\n\nMenus.defaultProps = {\n  options: [],\n  value: [],\n  activeValue: [],\n  onSelect: function onSelect() {},\n  prefixCls: 'rc-cascader-menus',\n  visible: false,\n  expandTrigger: 'click'\n};\nexport default Menus;","map":null,"metadata":{},"sourceType":"module"}