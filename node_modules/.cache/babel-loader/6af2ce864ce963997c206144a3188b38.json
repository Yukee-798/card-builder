{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\n\nconst codegen_1 = require(\"./codegen\");\n\nconst util_1 = require(\"./util\");\n\nconst names_1 = require(\"./names\");\n\nexports.keywordError = {\n  message: ({\n    keyword\n  }) => codegen_1.str`should pass \"${keyword}\" keyword validation`\n};\nexports.keyword$DataError = {\n  message: ({\n    keyword,\n    schemaType\n  }) => schemaType ? codegen_1.str`\"${keyword}\" keyword must be ${schemaType} ($data)` : codegen_1.str`\"${keyword}\" keyword is invalid ($data)`\n};\n\nfunction reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {\n  const {\n    it\n  } = cxt;\n  const {\n    gen,\n    compositeRule,\n    allErrors\n  } = it;\n  const errObj = errorObjectCode(cxt, error, errorPaths);\n\n  if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {\n    addError(gen, errObj);\n  } else {\n    returnErrors(it, codegen_1._`[${errObj}]`);\n  }\n}\n\nexports.reportError = reportError;\n\nfunction reportExtraError(cxt, error = exports.keywordError, errorPaths) {\n  const {\n    it\n  } = cxt;\n  const {\n    gen,\n    compositeRule,\n    allErrors\n  } = it;\n  const errObj = errorObjectCode(cxt, error, errorPaths);\n  addError(gen, errObj);\n\n  if (!(compositeRule || allErrors)) {\n    returnErrors(it, names_1.default.vErrors);\n  }\n}\n\nexports.reportExtraError = reportExtraError;\n\nfunction resetErrorsCount(gen, errsCount) {\n  gen.assign(names_1.default.errors, errsCount);\n  gen.if(codegen_1._`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign(codegen_1._`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));\n}\n\nexports.resetErrorsCount = resetErrorsCount;\n\nfunction extendErrors({\n  gen,\n  keyword,\n  schemaValue,\n  data,\n  errsCount,\n  it\n}) {\n  /* istanbul ignore if */\n  if (errsCount === undefined) throw new Error(\"ajv implementation error\");\n  const err = gen.name(\"err\");\n  gen.forRange(\"i\", errsCount, names_1.default.errors, i => {\n    gen.const(err, codegen_1._`${names_1.default.vErrors}[${i}]`);\n    gen.if(codegen_1._`${err}.instancePath === undefined`, () => gen.assign(codegen_1._`${err}.instancePath`, codegen_1.strConcat(names_1.default.instancePath, it.errorPath)));\n    gen.assign(codegen_1._`${err}.schemaPath`, codegen_1.str`${it.errSchemaPath}/${keyword}`);\n\n    if (it.opts.verbose) {\n      gen.assign(codegen_1._`${err}.schema`, schemaValue);\n      gen.assign(codegen_1._`${err}.data`, data);\n    }\n  });\n}\n\nexports.extendErrors = extendErrors;\n\nfunction addError(gen, errObj) {\n  const err = gen.const(\"err\", errObj);\n  gen.if(codegen_1._`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, codegen_1._`[${err}]`), codegen_1._`${names_1.default.vErrors}.push(${err})`);\n  gen.code(codegen_1._`${names_1.default.errors}++`);\n}\n\nfunction returnErrors(it, errs) {\n  const {\n    gen,\n    validateName,\n    schemaEnv\n  } = it;\n\n  if (schemaEnv.$async) {\n    gen.throw(codegen_1._`new ${it.ValidationError}(${errs})`);\n  } else {\n    gen.assign(codegen_1._`${validateName}.errors`, errs);\n    gen.return(false);\n  }\n}\n\nconst E = {\n  keyword: new codegen_1.Name(\"keyword\"),\n  schemaPath: new codegen_1.Name(\"schemaPath\"),\n  params: new codegen_1.Name(\"params\"),\n  propertyName: new codegen_1.Name(\"propertyName\"),\n  message: new codegen_1.Name(\"message\"),\n  schema: new codegen_1.Name(\"schema\"),\n  parentSchema: new codegen_1.Name(\"parentSchema\")\n};\n\nfunction errorObjectCode(cxt, error, errorPaths) {\n  const {\n    createErrors\n  } = cxt.it;\n  if (createErrors === false) return codegen_1._`{}`;\n  return errorObject(cxt, error, errorPaths);\n}\n\nfunction errorObject(cxt, error, errorPaths = {}) {\n  const {\n    gen,\n    it\n  } = cxt;\n  const keyValues = [errorInstancePath(it, errorPaths), errorSchemaPath(cxt, errorPaths)];\n  extraErrorProps(cxt, error, keyValues);\n  return gen.object(...keyValues);\n}\n\nfunction errorInstancePath({\n  errorPath\n}, {\n  instancePath\n}) {\n  const instPath = instancePath ? codegen_1.str`${errorPath}${util_1.getErrorPath(instancePath, util_1.Type.Str)}` : errorPath;\n  return [names_1.default.instancePath, codegen_1.strConcat(names_1.default.instancePath, instPath)];\n}\n\nfunction errorSchemaPath({\n  keyword,\n  it: {\n    errSchemaPath\n  }\n}, {\n  schemaPath,\n  parentSchema\n}) {\n  let schPath = parentSchema ? errSchemaPath : codegen_1.str`${errSchemaPath}/${keyword}`;\n\n  if (schemaPath) {\n    schPath = codegen_1.str`${schPath}${util_1.getErrorPath(schemaPath, util_1.Type.Str)}`;\n  }\n\n  return [E.schemaPath, schPath];\n}\n\nfunction extraErrorProps(cxt, {\n  params,\n  message\n}, keyValues) {\n  const {\n    keyword,\n    data,\n    schemaValue,\n    it\n  } = cxt;\n  const {\n    opts,\n    propertyName,\n    topSchemaRef,\n    schemaPath\n  } = it;\n  keyValues.push([E.keyword, keyword], [E.params, typeof params == \"function\" ? params(cxt) : params || codegen_1._`{}`]);\n\n  if (opts.messages) {\n    keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n  }\n\n  if (opts.verbose) {\n    keyValues.push([E.schema, schemaValue], [E.parentSchema, codegen_1._`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);\n  }\n\n  if (propertyName) keyValues.push([E.propertyName, propertyName]);\n}","map":null,"metadata":{},"sourceType":"script"}