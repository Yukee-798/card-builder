{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from 'rc-tree-select';\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport { ConfigContext } from '../config-provider';\nimport devWarning from '../_util/devWarning';\nimport getIcons from '../select/utils/iconUtil';\nimport renderSwitcherIcon from '../tree/utils/iconUtil';\nimport SizeContext from '../config-provider/SizeContext';\nimport { getTransitionName } from '../_util/motion';\n\nvar InternalTreeSelect = function InternalTreeSelect(_a, ref) {\n  var _classNames2;\n\n  var customizePrefixCls = _a.prefixCls,\n      customizeSize = _a.size,\n      _a$bordered = _a.bordered,\n      bordered = _a$bordered === void 0 ? true : _a$bordered,\n      className = _a.className,\n      treeCheckable = _a.treeCheckable,\n      multiple = _a.multiple,\n      _a$listHeight = _a.listHeight,\n      listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight,\n      _a$listItemHeight = _a.listItemHeight,\n      listItemHeight = _a$listItemHeight === void 0 ? 26 : _a$listItemHeight,\n      notFoundContent = _a.notFoundContent,\n      _switcherIcon = _a.switcherIcon,\n      treeLine = _a.treeLine,\n      getPopupContainer = _a.getPopupContainer,\n      dropdownClassName = _a.dropdownClassName,\n      _a$treeIcon = _a.treeIcon,\n      treeIcon = _a$treeIcon === void 0 ? false : _a$treeIcon,\n      transitionName = _a.transitionName,\n      _a$choiceTransitionNa = _a.choiceTransitionName,\n      choiceTransitionName = _a$choiceTransitionNa === void 0 ? '' : _a$choiceTransitionNa,\n      props = __rest(_a, [\"prefixCls\", \"size\", \"bordered\", \"className\", \"treeCheckable\", \"multiple\", \"listHeight\", \"listItemHeight\", \"notFoundContent\", \"switcherIcon\", \"treeLine\", \"getPopupContainer\", \"dropdownClassName\", \"treeIcon\", \"transitionName\", \"choiceTransitionName\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getContextPopupContainer = _React$useContext.getPopupContainer,\n      getPrefixCls = _React$useContext.getPrefixCls,\n      renderEmpty = _React$useContext.renderEmpty,\n      direction = _React$useContext.direction,\n      virtual = _React$useContext.virtual,\n      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;\n\n  var size = React.useContext(SizeContext);\n  devWarning(multiple !== false || !treeCheckable, 'TreeSelect', '`multiple` will alway be `true` when `treeCheckable` is true');\n  var prefixCls = getPrefixCls('select', customizePrefixCls);\n  var treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);\n  var treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);\n  var mergedDropdownClassName = classNames(dropdownClassName, \"\".concat(treeSelectPrefixCls, \"-dropdown\"), _defineProperty({}, \"\".concat(treeSelectPrefixCls, \"-dropdown-rtl\"), direction === 'rtl'));\n  var isMultiple = !!(treeCheckable || multiple); // ===================== Icons =====================\n\n  var _getIcons = getIcons(_extends(_extends({}, props), {\n    multiple: isMultiple,\n    prefixCls: prefixCls\n  })),\n      suffixIcon = _getIcons.suffixIcon,\n      removeIcon = _getIcons.removeIcon,\n      clearIcon = _getIcons.clearIcon; // ===================== Empty =====================\n\n\n  var mergedNotFound;\n\n  if (notFoundContent !== undefined) {\n    mergedNotFound = notFoundContent;\n  } else {\n    mergedNotFound = renderEmpty('Select');\n  } // ==================== Render =====================\n\n\n  var selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);\n  var mergedSize = customizeSize || size;\n  var mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-lg\"), mergedSize === 'large'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-sm\"), mergedSize === 'small'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-borderless\"), !bordered), _classNames2), className);\n  var rootPrefixCls = getPrefixCls();\n  return /*#__PURE__*/React.createElement(RcTreeSelect, _extends({\n    virtual: virtual,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }, selectProps, {\n    ref: ref,\n    prefixCls: prefixCls,\n    className: mergedClassName,\n    listHeight: listHeight,\n    listItemHeight: listItemHeight,\n    treeCheckable: treeCheckable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-tree-checkbox-inner\")\n    }) : treeCheckable,\n    inputIcon: suffixIcon,\n    multiple: multiple,\n    removeIcon: removeIcon,\n    clearIcon: clearIcon,\n    switcherIcon: function switcherIcon(nodeProps) {\n      return renderSwitcherIcon(treePrefixCls, _switcherIcon, treeLine, nodeProps);\n    },\n    showTreeIcon: treeIcon,\n    notFoundContent: mergedNotFound,\n    getPopupContainer: getPopupContainer || getContextPopupContainer,\n    treeMotion: null,\n    dropdownClassName: mergedDropdownClassName,\n    choiceTransitionName: getTransitionName(rootPrefixCls, '', choiceTransitionName),\n    transitionName: getTransitionName(rootPrefixCls, 'slide-up', transitionName)\n  }));\n};\n\nvar TreeSelectRef = /*#__PURE__*/React.forwardRef(InternalTreeSelect);\nvar TreeSelect = TreeSelectRef;\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport { TreeNode };\nexport default TreeSelect;","map":null,"metadata":{},"sourceType":"module"}